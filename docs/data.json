/* =================================================================== */
/* A CRÔNICA DA HUMANIDADE - SCRIPT PRINCIPAL (main.js) V2.0           */
/* =================================================================== */
/* Equipe: Creative Tech, Full-Stack, Interactive Dev, UX, A11y        */
/* =================================================================== */

// UX: Espera o DOM estar totalmente carregado antes de executar o script.
document.addEventListener('DOMContentLoaded', () => {

    // ===============================================================
    // 1. SELEÇÃO DE ELEMENTOS DO DOM E ESTADO DA APLICAÇÃO
    // ===============================================================
    // Front-End Dev: Armazenar referências aos elementos do DOM para performance.
    const domElements = {
        globeContainer: document.getElementById('globe-container'),
        timelineContainer: document.getElementById('timeline-container'),
        infoPanel: document.getElementById('info-panel'),
        infoContentWrapper: document.getElementById('info-content-wrapper'),
        closeInfoPanelBtn: document.getElementById('close-info-panel'),
        zoomInBtn: document.getElementById('zoom-in'),
        zoomOutBtn: document.getElementById('zoom-out'),
        resetViewBtn: document.getElementById('reset-view'),
        // Novos elementos para modais de busca e configurações
        searchButton: document.getElementById('search-button'),
        searchModal: document.getElementById('search-modal'),
        closeSearchModalBtn: document.getElementById('close-search-modal'),
        searchInput: document.getElementById('search-input'),
        searchResults: document.getElementById('search-results'),
        settingsButton: document.getElementById('settings-button'),
        settingsModal: document.getElementById('settings-modal'),
        closeSettingsModalBtn: document.getElementById('close-settings-modal'),
        globeRotationSpeedInput: document.getElementById('globe-rotation-speed'),
        enableAnimationsCheckbox: document.getElementById('enable-animations')
    };

    // Full-Stack Dev: Gerenciar o estado da aplicação.
    const appState = {
        data: null, // Armazenará todo o conteúdo do data.json
        activeTopic: null, // ID do tópico atualmente selecionado
        globeRotationSpeed: parseFloat(domElements.globeRotationSpeedInput.value), // Velocidade inicial do globo
        animationsEnabled: domElements.enableAnimationsCheckbox.checked // Animações da UI
    };

    // ===============================================================
    // 2. INICIALIZAÇÃO DA CENA 3D (CREATIVE TECHNOLOGIST)
    // ===============================================================
    let scene, camera, renderer, controls, earthMesh, cloudsMesh;

    function initThreeJS() {
        // --- Cena e Câmera ---
        scene = new THREE.Scene();
        camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        camera.position.z = 2.5;

        // --- Renderizador ---
        renderer = new THREE.WebGLRenderer({
            antialias: true,
            alpha: true // Fundo transparente para ver a cor do body
        });
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2)); // Otimiza para telas de alta resolução
        domElements.globeContainer.appendChild(renderer.domElement);

        // --- Luzes ---
        const ambientLight = new THREE.AmbientLight(0xffffff, 0.2);
        scene.add(ambientLight);
        const directionalLight = new THREE.DirectionalLight(0xffffff, 1.0);
        directionalLight.position.set(5, 3, 5);
        scene.add(directionalLight);
        
        // --- Controles de Órbita ---
        controls = new THREE.OrbitControls(camera, renderer.domElement);
        controls.enableDamping = true;
        controls.dampingFactor = 0.05;
        controls.enablePan = false;
        controls.minDistance = 1.2;
        controls.maxDistance = 5;

        // --- Gerenciador de Carregamento de Texturas (Interno) ---
        // Não visível ao usuário, apenas para controle interno de assets 3D
        const textureLoadingManager = new THREE.LoadingManager();
        textureLoadingManager.onLoad = () => {
            console.log("Todas as texturas 3D foram carregadas.");
            // Creative Tech: Pequena animação de opacidade para o globo aparecer suavemente
            gsap.fromTo(renderer.domElement, { opacity: 0 }, { opacity: 1, duration: 1.5, ease: "power2.out" });
        };
        textureLoadingManager.onError = (url) => console.error('Erro ao carregar textura:', url);

        const textureLoader = new THREE.TextureLoader(textureLoadingManager);

        // --- Criando o Planeta Terra ---
        const earthDayMap = textureLoader.load('assets/textures/earth_daymap.jpg');
        const earthSpecularMap = textureLoader.load('assets/textures/earth_specular_map.jpg');
        const earthNormalMap = textureLoader.load('assets/textures/earth_normal_map.png');
        
        const earthGeometry = new THREE.SphereGeometry(1, 64, 64);
        const earthMaterial = new THREE.MeshStandardMaterial({
            map: earthDayMap,
            metalnessMap: earthSpecularMap,
            normalMap: earthNormalMap,
            metalness: 0.5,
            roughness: 0.7
        });
        earthMesh = new THREE.Mesh(earthGeometry, earthMaterial);
        scene.add(earthMesh);

        // --- Criando as Nuvens ---
        const cloudMap = textureLoader.load('assets/textures/earth_clouds.png');
        const cloudsGeometry = new THREE.SphereGeometry(1.02, 64, 64);
        const cloudsMaterial = new THREE.MeshPhongMaterial({
            map: cloudMap,
            transparent: true,
            opacity: 0.8
        });
        cloudsMesh = new THREE.Mesh(cloudsGeometry, cloudsMaterial);
        scene.add(cloudsMesh);

        // --- Criando o Fundo Estrelado (Starfield) ---
        const starMap = textureLoader.load('assets/textures/starfield.jpg');
        const starGeometry = new THREE.SphereGeometry(500, 64, 64);
        const starMaterial = new THREE.MeshBasicMaterial({
            map: starMap,
            side: THREE.BackSide
        });
        scene.add(new THREE.Mesh(starGeometry, starMaterial));

        // --- Loop de Animação ---
        animate();
    }
    
    // Creative Dev: O loop que renderiza a cena a cada frame.
    function animate() {
        requestAnimationFrame(animate);

        // Animação sutil de rotação para dar vida ao planeta
        if (appState.globeRotationSpeed > 0) {
            earthMesh.rotation.y += appState.globeRotationSpeed;
            cloudsMesh.rotation.y += appState.globeRotationSpeed * 1.5; // Nuvens giram um pouco mais rápido
        }

        controls.update();
        renderer.render(scene, camera);
    }
    
    // --- Responsividade ---
    window.addEventListener('resize', () => {
        camera.aspect = window.innerWidth / window.innerHeight;
        camera.updateProjectionMatrix();
        renderer.setSize(window.innerWidth, window.innerHeight);
    });

    // ===============================================================
    // 3. LÓGICA DA UI E EVENTOS (INTERACTIVE DEVELOPER)
    // ===============================================================
    function initUI() {
        // --- Interação com a Linha do Tempo ---
        domElements.timelineContainer.addEventListener('click', (e) => {
            const topicElement = e.target.closest('[data-topic-id]');
            if (topicElement) {
                const topicId = topicElement.dataset.topicId;
                displayTopicInfo(topicId);

                const currentActive = domElements.timelineContainer.querySelector('.active');
                if (currentActive) currentActive.classList.remove('active');
                topicElement.classList.add('active');

                // Interactive Dev: Animar a câmera para o local do tópico
                const topicData = findTopicById(topicId);
                if (topicData && topicData.coordinates) {
                    animateGlobeToCoordinates(topicData.coordinates.lat, topicData.coordinates.lon);
                }
            }
        });

        // --- Fechar Painel de Informações ---
        domElements.closeInfoPanelBtn.addEventListener('click', () => {
            if (appState.animationsEnabled) {
                gsap.to(domElements.infoPanel, {
                    x: '100%',
                    opacity: 0,
                    duration: 0.4,
                    ease: 'power2.in',
                    onComplete: () => domElements.infoPanel.setAttribute('hidden', '')
                });
            } else {
                domElements.infoPanel.setAttribute('hidden', '');
            }
            appState.activeTopic = null;
            const currentActive = domElements.timelineContainer.querySelector('.active');
            if (currentActive) currentActive.classList.remove('active');
        });

        // --- Controles do Globo ---
        domElements.zoomInBtn.addEventListener('click', () => controls.dollyIn(1.2));
        domElements.zoomOutBtn.addEventListener('click', () => controls.dollyOut(1.2));
        domElements.resetViewBtn.addEventListener('click', () => {
            // Creative Tech: Animação suave para resetar a visão
            gsap.to(controls.target, {
                x: 0, y: 0, z: 0, duration: 1, ease: 'power2.inOut'
            });
            gsap.to(camera.position, {
                x: 0, y: 0, z: 2.5, duration: 1, ease: 'power2.inOut',
                onUpdate: () => controls.update()
            });
        });

        // --- Modal de Busca ---
        domElements.searchButton.addEventListener('click', () => domElements.searchModal.removeAttribute('hidden'));
        domElements.closeSearchModalBtn.addEventListener('click', () => domElements.searchModal.setAttribute('hidden', ''));
        domElements.searchInput.addEventListener('input', debounce(handleSearch, 300)); // UX: Debounce para evitar muitas chamadas

        // --- Modal de Configurações ---
        domElements.settingsButton.addEventListener('click', () => domElements.settingsModal.removeAttribute('hidden'));
        domElements.closeSettingsModalBtn.addEventListener('click', () => domElements.settingsModal.setAttribute('hidden', ''));
        domElements.globeRotationSpeedInput.addEventListener('input', (e) => {
            appState.globeRotationSpeed = parseFloat(e.target.value);
        });
        domElements.enableAnimationsCheckbox.addEventListener('change', (e) => {
            appState.animationsEnabled = e.target.checked;
        });

        // A11y: Fechar modais e painéis com ESC
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape') {
                if (!domElements.infoPanel.hasAttribute('hidden')) {
                    domElements.closeInfoPanelBtn.click();
                }
                if (!domElements.searchModal.hasAttribute('hidden')) {
                    domElements.closeSearchModalBtn.click();
                }
                if (!domElements.settingsModal.hasAttribute('hidden')) {
                    domElements.closeSettingsModalBtn.click();
                }
            }
        });
    }

    // Interactive Dev: Anima a câmera para uma coordenada específica no globo
    function animateGlobeToCoordinates(lat, lon) {
        // Converte Lat/Lon para coordenadas 3D
        const phi = (90 - lat) * Math.PI / 180;
        const theta = (lon + 180) * Math.PI / 180;

        const targetX = - (1 * Math.sin(phi) * Math.cos(theta));
        const targetY = (1 * Math.cos(phi));
        const targetZ = (1 * Math.sin(phi) * Math.sin(theta));

        // GSAP para animar a câmera e o target dos controles suavemente
        gsap.to(camera.position, {
            x: targetX * 1.5, // Ajuste para o zoom ideal
            y: targetY * 1.5,
            z: targetZ * 1.5,
            duration: 2,
            ease: "power3.inOut",
            onUpdate: () => controls.update() // Atualiza os controles durante a animação
        });
        gsap.to(controls.target, {
            x: targetX,
            y: targetY,
            z: targetZ,
            duration: 2,
            ease: "power3.inOut"
        });
    }

    // UX: Função debounce para otimizar chamadas de eventos (ex: busca)
    function debounce(func, delay) {
        let timeout;
        return function(...args) {
            const context = this;
            clearTimeout(timeout);
            timeout = setTimeout(() => func.apply(context, args), delay);
        };
    }

    // Lógica de Busca (Full-Stack/Front-End)
    function handleSearch() {
        const query = domElements.searchInput.value.toLowerCase();
        domElements.searchResults.innerHTML = ''; // Limpa resultados anteriores

        if (query.length < 2) return; // Mínimo de caracteres para buscar

        let results = [];
        for (const era of appState.data.eras) {
            for (const topic of era.topics) {
                const searchString = `${topic.title} ${topic.dateRange} ${topic.content}`.toLowerCase();
                if (searchString.includes(query)) {
                    results.push({ ...topic, eraName: era.name });
                }
            }
        }

        if (results.length > 0) {
            let resultsHtml = '<ul>';
            results.forEach(result => {
                resultsHtml += `
                    <li data-topic-id="${result.id}">
                        <div class="result-title">${result.title}</div>
                        <div class="result-era">Era: ${result.eraName} (${result.dateRange})</div>
                    </li>
                `;
            });
            resultsHtml += '</ul>';
            domElements.searchResults.innerHTML = resultsHtml;

            // Adiciona listener para cliques nos resultados da busca
            domElements.searchResults.querySelectorAll('li').forEach(item => {
                item.addEventListener('click', (e) => {
                    const topicId = e.currentTarget.dataset.topicId;
                    displayTopicInfo(topicId);
                    domElements.searchModal.setAttribute('hidden', ''); // Fecha o modal de busca
                    // Destaca o item na timeline
                    const currentActive = domElements.timelineContainer.querySelector('.active');
                    if (currentActive) currentActive.classList.remove('active');
                    const topicElement = domElements.timelineContainer.querySelector(`[data-topic-id="${topicId}"]`);
                    if (topicElement) topicElement.classList.add('active');
                });
            });

        } else {
            domElements.searchResults.innerHTML = '<p style="color: var(--color-secondary-text);">Nenhum resultado encontrado.</p>';
        }
    }


    // ===============================================================
    // 4. MANIPULAÇÃO DE DADOS (FULL-STACK DEV)
    // ===============================================================

    async function loadDataAndPopulateUI() {
        try {
            const response = await fetch('data.json');
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            appState.data = await response.json();
            populateTimeline();
        } catch (error) {
            console.error("Não foi possível carregar os dados das crônicas:", error);
            domElements.timelineContainer.innerHTML = `<p style="color: red;">Erro ao carregar conteúdo.</p>`;
        }
    }

    // Helper para encontrar tópico pelo ID (Full-Stack Dev)
    function findTopicById(topicId) {
        if (!appState.data) return null;
        for (const era of appState.data.eras) {
            const foundTopic = era.topics.find(t => t.id === topicId);
            if (foundTopic) {
                return foundTopic;
            }
        }
        return null;
    }

    function populateTimeline() {
        const { eras } = appState.data;
        let html = '';
        for (const era of eras) {
            html += `
                <div class="era" data-era-id="${era.id}">
                    <h3>${era.name}</h3>
                    <ul class="topics">
                        ${era.topics.map(topic => `
                            <li data-topic-id="${topic.id}">${topic.title}</li>
                        `).join('')}
                    </ul>
                </div>
            `;
        }
        domElements.timelineContainer.innerHTML = html;
    }

    function displayTopicInfo(topicId) {
        const topicData = findTopicById(topicId);

        if (topicData) {
            appState.activeTopic = topicId;
            const contentHtml = `
                <h2 id="info-title">${topicData.title}</h2>
                <p id="info-date-range" class="date-range">${topicData.dateRange}</p>
                <div id="info-body">
                    ${topicData.content} 
                </div>
            `;
            domElements.infoContentWrapper.innerHTML = contentHtml;
            domElements.infoContentWrapper.scrollTop = 0; // Garante que o painel inicie do topo

            // Creative Tech/UX: Animação do painel entrando
            if (domElements.infoPanel.hasAttribute('hidden')) {
                domElements.infoPanel.style.opacity = 0; // Inicia transparente
                domElements.infoPanel.style.transform = 'translateX(100%)'; // Inicia fora da tela
                domElements.infoPanel.removeAttribute('hidden');
            }

            if (appState.animationsEnabled) {
                gsap.to(domElements.infoPanel, {
                    x: '0%',
                    opacity: 1,
                    duration: 0.5,
                    ease: 'power2.out'
                });
            } else {
                domElements.infoPanel.style.transform = 'translateX(0%)';
                domElements.infoPanel.style.opacity = 1;
            }

        } else {
            console.warn(`Tópico com id "${topicId}" não encontrado.`);
        }
    }

    // ===============================================================
    // 5. INICIALIZAÇÃO GERAL DA APLICAÇÃO
    // ===============================================================
    function initApp() {
        initThreeJS(); // Inicializa a cena 3D primeiro
        initUI();     // Configura os listeners da UI
        loadDataAndPopulateUI(); // Carrega os dados e popula a timeline
    }

    initApp();

});
